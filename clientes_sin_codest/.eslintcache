[{"/home/rafael/apps-sin-excel/clientes_sin_codest/src/index.js":"1","/home/rafael/apps-sin-excel/clientes_sin_codest/src/App.js":"2","/home/rafael/apps-sin-excel/clientes_sin_codest/src/reportWebVitals.js":"3","/home/rafael/apps-sin-excel/clientes_sin_codest/src/components/tablaClientes/TablaClientes.tsx":"4","/home/rafael/apps-sin-excel/clientes_sin_codest/src/components/nav/Nav.tsx":"5","/home/rafael/apps-sin-excel/clientes_sin_codest/src/components/tabla/Tabla.js":"6","/home/rafael/apps-sin-excel/clientes_sin_codest/src/services/import.js":"7","/home/rafael/apps-sin-excel/clientes_sin_codest/src/services/export.js":"8","/home/rafael/apps-sin-excel/clientes_sin_codest/src/services/client.service.js":"9","/home/rafael/apps-sin-excel/clientes_sin_codest/src/http-common.js":"10"},{"size":587,"mtime":1609234128368,"results":"11","hashOfConfig":"12"},{"size":867,"mtime":1609234128368,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1609234128368,"results":"14","hashOfConfig":"12"},{"size":6301,"mtime":1609234128368,"results":"15","hashOfConfig":"12"},{"size":843,"mtime":1609234128368,"results":"16","hashOfConfig":"12"},{"size":3418,"mtime":1609234128368,"results":"17","hashOfConfig":"12"},{"size":6114,"mtime":1609234128368,"results":"18","hashOfConfig":"12"},{"size":972,"mtime":1609234128368,"results":"19","hashOfConfig":"12"},{"size":297,"mtime":1609234128368,"results":"20","hashOfConfig":"12"},{"size":154,"mtime":1609235325456,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"s8jh8c",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rafael/apps-sin-excel/clientes_sin_codest/src/index.js",[],["48","49"],"/home/rafael/apps-sin-excel/clientes_sin_codest/src/App.js",[],"/home/rafael/apps-sin-excel/clientes_sin_codest/src/reportWebVitals.js",[],"/home/rafael/apps-sin-excel/clientes_sin_codest/src/components/tablaClientes/TablaClientes.tsx",["50","51","52","53","54"],"import * as React from 'react';\nimport styles from './TablaClientes.module.scss';\nimport { ITablaClientesProps } from './ITablaClientesProps';\nimport { ITablaClientesState } from './ITablaClientesState';\nimport Container from '@material-ui/core/Container';\nimport Tabla from '../tabla/Tabla';\nimport { initializeIcons } from '@uifabric/icons';\nimport {\n  MessageBar,\n  MessageBarType,\n} from 'office-ui-fabric-react';\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\nimport { IButtonProps } from 'office-ui-fabric-react/lib/Button';\nimport { Spinner } from 'office-ui-fabric-react/lib/Spinner';\n// Servicios\nimport Import from '../../services/import';\nimport Export from '../../services/export';\nimport clientService from '../../services/client.service';\n\nconst cols = [\n  { dataField: 'pdv',             text: 'PDV',           sort: true, align: \"left\",   editable: false, headerOps: { width: '90px' } },\n  { dataField: 'global',          text: 'Global',        sort: true, align: \"left\",   editable: false, headerOps: { width: '90px' } },\n  { dataField: 'codcli',          text: 'Cliente',       sort: true, align: \"left\",   editable: false, headerOps: { width: '90px'} },\n  { dataField: 'nombre',          text: 'Nombre',        sort: true, align: \"left\",   editable: false, headerOps: { width: '300px', overflow: 'hidden' } },\n  { dataField: 'cadena',          text: 'Cadena',        sort: true, align: \"left\",   editable: false, headerOps: { width: '150px'} },\n  { dataField: 'codest',          text: 'Cod. Est',      sort: true, align: \"left\",   editable: true,  headerOps: { width: '180px' } },\n  { dataField: 'nomext',          text: 'Com. Exterior', sort: true, align: \"left\",   editable: false, headerOps: { width: '240px' } },\n  { dataField: 'nomdrv',          text: 'DRV',           sort: true, align: \"left\",   editable: false, headerOps: { width: '220px' } },\n  { dataField: 'vta_anio_ant',    text: 'Venta 2019',    sort: true, align: \"right\",  editable: false, headerOps: { width: '130px' } },\n  { dataField: 'vta_anio_actual', text: 'Venta 2020',    sort: true, align: \"right\",  editable: false, headerOps: { width: '130px' } },\n]\nconst overflowProps: IButtonProps = { ariaLabel: 'More commands' };\nconst exportProps: any = { fileName: \"clientes\", exportType: \"csv\" }\n\n\nexport default class TablaClientes extends React.Component<ITablaClientesProps, ITablaClientesState>{\n  _isMounted = false;\n  constructor(props: ITablaClientesProps) {\n    super(props);\n    this.state = {\n      data: [], \n      filteredData: [],\n      showMessage: true, \n      file: null, \n      loading:true, \n      download: false\n    }\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.getData()\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private async getData() {\n    let data = []\n    if(this._isMounted){\n    this.setState({loading:true})\n      data = await clientService.getAll().then(async (res) => {\n      let result = res.data.filter((d: any) => (d.codest == \" \" || d.codest == undefined || !d.codest))\n      this.setState({ data: result, filteredData:result })\n      return result\n    });\n    // await this.setState({ data: data, filteredData:data })\n    \n    this.setState({loading:false})\n  }\n    return data\n  // }\n\n  }\n\n  updateFilteredData = (filteredData:any) => {\n    this.setState({ filteredData });\n  }\n\n  private renameKey(object: any):any{\n\n    const clonedObj = {...object};\n\n    cols.map(col=>{\n      let targetKey = clonedObj[col.dataField];\n      delete clonedObj[col.dataField];\n      clonedObj[col.text] = targetKey;\n    })\n  \n    return clonedObj;\n  };\n\n  private filterDocs(){\n  \n    // Cambiamos el formato de las columnas del excel\n    let docs = this.state.filteredData.map(doc=>this.renameKey(doc))\n    return docs\n  }\n  \n  private setDownload(download: boolean){\n    this.setState({download})\n    console.log(this.state.download)\n  }\n\n  private _items: ICommandBarItemProps[] = [\n \n    {\n      key: 'upload',\n      text: 'Importar excel',\n      iconProps: { iconName: 'Upload' },\n      onClick: () => {\n         $('input[type=file]').trigger('click') ;\n      }\n    },\n    {\n      key: 'download',\n      text: 'Descargar excel',\n      iconProps: { iconName: 'Download' },\n      onClick: () => {\n        let docs = this.filterDocs();\n        this.setState({download:true});\n       \n      },\n    },\n    {\n      key: 'update',\n      text: 'Actualizar tabla',\n      iconProps: { iconName: 'Refresh' },\n      onClick: () => this.getData(),\n    },\n  ];\n \n  \n  public render(): React.ReactElement<ITablaClientesProps> {\n    const close = () => this.setState({showMessage:false});\n    \n    initializeIcons();\n    return (\n      <div className={styles.TablaClientes}>\n        <Container maxWidth=\"xl\" >\n          {( this.props.conexiones > 1 && this.state.showMessage ) ?\n        \n            <MessageBar\n              messageBarType={MessageBarType.warning}\n              isMultiline={false}\n              onDismiss={close}\n              dismissButtonAriaLabel=\"Close\"\n            >\n            Hay más usuarios utilizando la aplicación. Por favor, actualiza la tabla para ver los datos correctamente. \n            \n          </MessageBar>\n        \n         : \"\"}\n\n          <div>\n            <CommandBar\n              items={this._items}\n              overflowButtonProps={overflowProps}\n              ariaLabel=\"Utilizar flechas para cambiar de comandos\"\n            />\n          </div>\n          \n          <Import/>\n\n          {this.state.loading ? \n            <div className={styles.spinnerWrapper}>\n              <Spinner label=\"Cargando datos\"></Spinner>\n            </div>\n          : \"\"}\n\n          {(this.state.data.length !== 0 && !this.state.loading )?\n\n            <Tabla\n              rows={this.state.data}\n              cols={cols}\n              updateFilteredData={this.updateFilteredData}\n            />\n\n            : <></>}\n            \n        \n        </Container>\n        {this.state.download? \n           <Export \n              data = {this.state.filteredData}\n              download= {this.state.download}\n              setDownload = {this.setDownload.bind(this)}\n              cols = {cols}\n            ></Export> \n       \n         :\"\"}\n\n      </div>\n    );\n  }\n}\n",["55","56"],"/home/rafael/apps-sin-excel/clientes_sin_codest/src/components/nav/Nav.tsx",[],"/home/rafael/apps-sin-excel/clientes_sin_codest/src/components/tabla/Tabla.js",["57","58"],"import React, { useEffect, useState } from 'react';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport style from '../tablaClientes/TablaClientes.module.scss';\nimport clientService from '../../services/client.service';\n\nconst { SearchBar } = Search;\n\nfunction Tabla(props) {\n\n  const [rows, setRows] = useState(props.rows);\n  const [cols] = useState(getCols());\n\n  useEffect(()=>{\n    setRows(props.rows)\n  }, []);\n\n  const defaultSorted = [{ dataField: '_id', order: 'asc' }];\n\n  const customTotal = (from, to, size) => (\n    <span className=\"react-bootstrap-table-pagination-total\">\n      Mostrando { from} a { to} de { size} resultados\n    </span>\n  );\n\n  const options = {\n    showTotal: true,\n    paginationTotalRenderer: customTotal,\n  }\n\n  function getCols() {\n\n    let columns = []\n    props.cols.map(column => {\n\n      let col =\n      {\n        dataField: column.dataField,\n        text: column.text,\n        sort: column.sort,\n        filter: textFilter({ placeholder: \"Introducir \" + column.text }),\n        headerStyle: column.headerOps,\n        align: column.align,\n        editable: column.editable\n      }\n      columns.push(col)\n    });\n\n    return columns\n  }\n\n  async function saveCell(row) {\n\n    console.log(row)\n\n    await clientService.update(row['_id'], row).then((res, err) => {\n      if (err) console.log(err)\n      console.log(res)\n      return res\n    })\n  }\n  const afterSearch = (newResult) => {\n    props.updateFilteredData(newResult)\n  };\n\n  return (\n\n    <div className={style.TablaClientes}>\n\n      {rows.length !== 0 ?\n        <ToolkitProvider\n          keyField=\"_id\"\n          search={{afterSearch}}\n          data={rows}\n          columns={cols}\n        >\n          {\n            props => (\n              <div>\n                <nav className=\"navbar navbar-light bg-light\">\n\n                  <SearchBar {...props.searchProps}\n                    placeholder=\"Buscar\"\n                  />\n\n                </nav>\n                \n                <BootstrapTable\n                  {...props.baseProps}\n                  keyField='_id'\n                  data={rows}\n                  columns={cols}\n                  defaultSorted={defaultSorted}\n                  //  hover\n                  //  striped\n                  bordered={false}\n                  bootstrap4\n                  pagination={paginationFactory(options)}\n                  filter={filterFactory()}\n                  noDataIndication=\"No se han encontrado resultados\"\n                  headerClasses={style.headerClass}\n                  wrapperClasses=\"table-responsive\"\n                  cellEdit={cellEditFactory(\n                    {\n                      mode: 'click',\n                      blurToSave: true,\n\n                      afterSaveCell: (oldValue, newValue, row, column) => {\n                        saveCell(row)\n                      }\n                    }\n                  )}\n                />\n              </div>\n            )}\n        </ToolkitProvider>\n        : <></>}\n        \n  \n    </div>\n  );\n\n}\n\nexport default Tabla;","/home/rafael/apps-sin-excel/clientes_sin_codest/src/services/import.js",["59","60"],"import React, { Component } from \"react\"\nimport { Upload } from \"antd\"\nimport { ExcelRenderer } from \"react-excel-renderer\"\nimport clientService from '../services/client.service';\nimport {\n    MessageBar,\n    MessageBarType,\n} from 'office-ui-fabric-react';\n\nexport default class Import extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            message: {\n                type: \"\",\n                message: \"\"\n            },\n            showMessage: false,\n            file: null\n\n        };\n    }\n\n    updateData = async () => {\n      \n        this.state.data.map(async row => {\n            if (row.codest == undefined) row.codest = \"\"\n            await clientService.update(row['_id'], row).then((res, err) => {\n                if (err) console.log(err)\n                console.log(res)\n                return res\n            })\n        })\n    }\n\n    handleSave = row => {\n        const newData = [...this.state.rows]\n        const index = newData.findIndex(item => row.key === item.key)\n        const item = newData[index]\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        })\n        this.setState({ rows: newData })\n    }\n\n    checkFile(file) {\n        let msg = \"\";\n        let type = \"\";\n        if (!file || !file[0]) {\n            return;\n        }\n        const isExcel =\n            file[0].type === \"application/vnd.ms-excel\" ||\n            file[0].type ===\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n        if (!isExcel) {\n            msg = \"Sólo se permiten archivos de tipo Excel\";\n            type = \"error\"\n        }\n        console.log(\"file\", file[0].type);\n        const isLt2M = file[0].size / 1024 / 1024 < 2;\n        if (!isLt2M) {\n            msg = \"El archivo no puede ocupar más de 2MB!\";\n            type = \"error\"\n        }\n       \n        let message = { type: type, message: msg }\n        this.setState({message, showMessage:true})\n        return msg;\n    }\n\n    fileHandler = fileList => {\n        let msg = \"\"\n        let type = \"\"\n        console.log(\"fileList\", fileList)\n        let fileObj = fileList\n        this.checkFile(fileObj)\n        if (!fileObj) {\n            msg = \"No se ha detectado ningun archivo\"\n            type = \"error\"\n            let message = { type: type, message: msg }\n            this.setState({ message, showMessage:true })\n            return false\n        } else {\n            this.setState({ file: fileObj })\n        }\n        console.log(\"fileObj.type:\", fileObj.type)\n        if (\n            !(\n                fileObj.type === \"application/vnd.ms-excel\" ||\n                fileObj.type ===\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            )\n        ) {\n            msg = \"No se reconoce el formato. Sólo son válidos los archivos Excel\"\n            type = \"error\"\n            let message = { type: type, message: msg }\n            this.setState({ message, showMessage:true })\n            return false\n        }\n        //Procesamos el archivo\n        ExcelRenderer(fileObj, (err, resp) => {\n            if (err) {\n                console.log(err)\n                msg = \"Ha habido un error al importar el archivo\"\n                type = \"error\"\n                let message = { type: type, message: msg }\n                this.setState({ message, showMessage:true })\n            } else {\n                let newRows = []\n                console.log(resp)\n                let rs = resp.rows.slice(1).filter(r => r.length!==0)\n                rs.map((row, index) => {\n                    console.log(row)\n                    if (row && row !== \"undefined\" && row !== [] && row !== null && row !== \"\" && row.length!==0) {\n                        newRows.push({\n                            _id: row[0],\n                            codest: row[6],\n                        })\n                    }\n                })\n                if (newRows.length === 0) {\n                    msg = \"No se han encontrado datos\"\n                    type = \"error\"\n                    let message = { type: type, message: msg }\n                    this.setState({ message, showMessage:true })\n                    return false\n                } else {\n                    msg = \"El archivo se ha cargado correctamente\"\n                    type = \"success\"\n                    let message = { type: type, message: msg }\n                    this.setState({ data: newRows, message, showMessage:true })\n\n                    this.updateData()\n                }\n\n            }\n        })\n        return false\n    }\n\n    render() {\n        const close = () => this.setState({ showMessage: false });\n        return (\n            <>\n                <div>\n                    <Upload\n                        name=\"file\"\n                        beforeUpload={this.fileHandler}\n                        onRemove={() => this.setState({ rows: [] })}\n                        multiple={false}\n                    >\n                    </Upload>\n\n                    {(this.state.showMessage && this.state.message.type === \"error\") ?\n\n                        <MessageBar\n                            messageBarType={MessageBarType.error}\n                            isMultiline={false}\n                            onDismiss={close}\n                            dismissButtonAriaLabel=\"Close\"\n                        >\n                            {this.state.message.message}\n\n                        </MessageBar>\n\n                        : \"\"}\n                    {(this.state.showMessage && this.state.message.type === \"success\") ?\n\n                        <MessageBar\n                            messageBarType={MessageBarType.success}\n                            isMultiline={false}\n                            onDismiss={close}\n                            dismissButtonAriaLabel=\"Close\"\n                        >\n                            {this.state.message.message}\n\n                        </MessageBar>\n\n                        : \"\"}\n                </div>\n            </>\n        )\n    }\n}","/home/rafael/apps-sin-excel/clientes_sin_codest/src/services/export.js",["61"],"import * as React from 'react';\nimport {\n    ExcelExport,\n    ExcelExportColumn,\n} from '@progress/kendo-react-excel-export';\n\n\nexport default class Export extends React.Component {\n    constructor(props){\n        super(props);\n    }\n    _exporter;\n    export = () => {\n        this._exporter.save(this.props.data);\n        console.log(this.props.data)\n        this.props.setDownload(false)\n    }\n    \n    render() {\n        \n        return (\n            <div>\n                <ExcelExport\n                    data={this.props.data}\n                    fileName=\"Listado.xlsx\"\n                    ref={(exporter) => { this._exporter = exporter; if(exporter)this.export() }}\n                >\n                     {this.props.cols.map((col, index) =>{\n                         return <ExcelExportColumn field={col.dataField} title={col.text} key={index} />\n                    })}\n                    \n                </ExcelExport> \n            </div>\n        );\n    }\n}\n\n","/home/rafael/apps-sin-excel/clientes_sin_codest/src/services/client.service.js",[],"/home/rafael/apps-sin-excel/clientes_sin_codest/src/http-common.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":33,"column":7,"nodeType":"68","messageId":"69","endLine":33,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":64,"column":58,"nodeType":"72","messageId":"73","endLine":64,"endColumn":60},{"ruleId":"70","severity":1,"message":"71","line":64,"column":77,"nodeType":"72","messageId":"73","endLine":64,"endColumn":79},{"ruleId":"74","severity":1,"message":"75","line":85,"column":17,"nodeType":"76","messageId":"77","endLine":85,"endColumn":19},{"ruleId":"66","severity":1,"message":"78","line":121,"column":13,"nodeType":"68","messageId":"69","endLine":121,"endColumn":17},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"79","severity":1,"message":"80","line":20,"column":6,"nodeType":"81","endLine":20,"endColumn":8,"suggestions":"82"},{"ruleId":"74","severity":1,"message":"75","line":38,"column":27,"nodeType":"76","messageId":"77","endLine":38,"endColumn":29},{"ruleId":"70","severity":1,"message":"71","line":29,"column":28,"nodeType":"72","messageId":"73","endLine":29,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":116,"column":37,"nodeType":"76","messageId":"77","endLine":116,"endColumn":39},{"ruleId":"83","severity":1,"message":"84","line":9,"column":5,"nodeType":"85","messageId":"86","endLine":11,"endColumn":6},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'exportProps' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'docs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.rows'. Either include it or remove the dependency array. If 'setRows' needs the current value of 'props.rows', you can also switch to useReducer instead of useState and read 'props.rows' in the reducer.","ArrayExpression",["89"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [props.rows]",{"range":"92","text":"93"},[772,774],"[props.rows]"]